create table "public"."Blog" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" character varying not null,
    "image" uuid default gen_random_uuid(),
    "body" text not null,
    "author" uuid not null default auth.uid(),
    "updated_at" timestamp without time zone,
    "published" boolean not null
);


alter table "public"."Blog" enable row level security;

create table "public"."Blog_Category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "blog_id" bigint not null,
    "category_id" bigint not null
);


alter table "public"."Blog_Category" enable row level security;

create table "public"."Category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone,
    "title" character varying not null,
    "image" uuid default gen_random_uuid(),
    "published" boolean not null,
    "author" uuid not null default auth.uid()
);


alter table "public"."Category" enable row level security;

create table "public"."Logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "object_id" bigint not null,
    "action" character varying not null,
    "table_name" character varying not null
);


alter table "public"."Logs" enable row level security;

CREATE UNIQUE INDEX "Blog_Category_pkey" ON public."Blog_Category" USING btree (id);

CREATE UNIQUE INDEX "Blog_pkey" ON public."Blog" USING btree (id);

CREATE UNIQUE INDEX "Category_pkey" ON public."Category" USING btree (id);

CREATE UNIQUE INDEX "Logs_pkey" ON public."Logs" USING btree (id);

alter table "public"."Blog" add constraint "Blog_pkey" PRIMARY KEY using index "Blog_pkey";

alter table "public"."Blog_Category" add constraint "Blog_Category_pkey" PRIMARY KEY using index "Blog_Category_pkey";

alter table "public"."Category" add constraint "Category_pkey" PRIMARY KEY using index "Category_pkey";

alter table "public"."Logs" add constraint "Logs_pkey" PRIMARY KEY using index "Logs_pkey";

alter table "public"."Blog" add constraint "Blog_author_fkey" FOREIGN KEY (author) REFERENCES auth.users(id) not valid;

alter table "public"."Blog" validate constraint "Blog_author_fkey";

alter table "public"."Blog" add constraint "Blog_image_fkey" FOREIGN KEY (image) REFERENCES storage.objects(id) ON DELETE SET NULL not valid;

alter table "public"."Blog" validate constraint "Blog_image_fkey";

alter table "public"."Blog_Category" add constraint "Blog_Category_blog_id_fkey" FOREIGN KEY (blog_id) REFERENCES "Blog"(id) ON DELETE CASCADE not valid;

alter table "public"."Blog_Category" validate constraint "Blog_Category_blog_id_fkey";

alter table "public"."Blog_Category" add constraint "Blog_Category_category_id_fkey" FOREIGN KEY (category_id) REFERENCES "Category"(id) ON DELETE CASCADE not valid;

alter table "public"."Blog_Category" validate constraint "Blog_Category_category_id_fkey";

alter table "public"."Category" add constraint "Category_author_fkey" FOREIGN KEY (author) REFERENCES auth.users(id) not valid;

alter table "public"."Category" validate constraint "Category_author_fkey";

alter table "public"."Category" add constraint "Category_image_fkey" FOREIGN KEY (image) REFERENCES storage.objects(id) ON DELETE SET NULL not valid;

alter table "public"."Category" validate constraint "Category_image_fkey";

alter table "public"."Logs" add constraint "Logs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."Logs" validate constraint "Logs_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.blog_category_create_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'CREATE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "create", "blog_categorys");
    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.blog_category_delete_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "delete", "blog_categorys");
    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.blog_create_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'CREATE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "create", "blogs");
    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.blog_delete_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, old.id, "delete", "blogs");
    END IF;

    RETURN NEW;
END;
$function$
;

create or replace view "public"."blog_draft_view" as  SELECT "Blog".id,
    "Blog".created_at,
    "Blog".title,
    "Blog".image,
    "Blog".body,
    "Blog".author,
    "Blog".updated_at,
    "Blog".published
   FROM "Blog"
  WHERE ("Blog".published = false);


create or replace view "public"."blog_published_view" as  SELECT "Blog".id,
    "Blog".created_at,
    "Blog".title,
    "Blog".image,
    "Blog".body,
    "Blog".author,
    "Blog".updated_at,
    "Blog".published
   FROM "Blog"
  WHERE ("Blog".published = true);


CREATE OR REPLACE FUNCTION public.blog_update_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (OLD.author, OLD.id, 'update', "blogs");
    END IF;
    
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.category_create_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'CREATE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "create", "categorys");
    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.category_delete_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "delete", "categorys");
    END IF;

    RETURN NEW;
END;
$function$
;

create or replace view "public"."category_draft_view" as  SELECT "Category".id,
    "Category".created_at,
    "Category".updated_at,
    "Category".title,
    "Category".image,
    "Category".published,
    "Category".author
   FROM "Category"
  WHERE ("Category".published = false);


create or replace view "public"."category_published_view" as  SELECT "Category".id,
    "Category".created_at,
    "Category".updated_at,
    "Category".title,
    "Category".image,
    "Category".published,
    "Category".author
   FROM "Category"
  WHERE ("Category".published = true);


CREATE OR REPLACE FUNCTION public.category_update_log()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO 'public', 'extensions'
AS $function$
BEGIN
    IF (TG_OP = 'UPDATE') THEN
        INSERT INTO public."Logs" (author_id, object_id, action, table_name)
        VALUES (old.author, OLD.id, "update", "categorys");
    END IF;

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."Blog" to "anon";

grant insert on table "public"."Blog" to "anon";

grant references on table "public"."Blog" to "anon";

grant select on table "public"."Blog" to "anon";

grant trigger on table "public"."Blog" to "anon";

grant truncate on table "public"."Blog" to "anon";

grant update on table "public"."Blog" to "anon";

grant delete on table "public"."Blog" to "authenticated";

grant insert on table "public"."Blog" to "authenticated";

grant references on table "public"."Blog" to "authenticated";

grant select on table "public"."Blog" to "authenticated";

grant trigger on table "public"."Blog" to "authenticated";

grant truncate on table "public"."Blog" to "authenticated";

grant update on table "public"."Blog" to "authenticated";

grant delete on table "public"."Blog" to "service_role";

grant insert on table "public"."Blog" to "service_role";

grant references on table "public"."Blog" to "service_role";

grant select on table "public"."Blog" to "service_role";

grant trigger on table "public"."Blog" to "service_role";

grant truncate on table "public"."Blog" to "service_role";

grant update on table "public"."Blog" to "service_role";

grant delete on table "public"."Blog_Category" to "anon";

grant insert on table "public"."Blog_Category" to "anon";

grant references on table "public"."Blog_Category" to "anon";

grant select on table "public"."Blog_Category" to "anon";

grant trigger on table "public"."Blog_Category" to "anon";

grant truncate on table "public"."Blog_Category" to "anon";

grant update on table "public"."Blog_Category" to "anon";

grant delete on table "public"."Blog_Category" to "authenticated";

grant insert on table "public"."Blog_Category" to "authenticated";

grant references on table "public"."Blog_Category" to "authenticated";

grant select on table "public"."Blog_Category" to "authenticated";

grant trigger on table "public"."Blog_Category" to "authenticated";

grant truncate on table "public"."Blog_Category" to "authenticated";

grant update on table "public"."Blog_Category" to "authenticated";

grant delete on table "public"."Blog_Category" to "service_role";

grant insert on table "public"."Blog_Category" to "service_role";

grant references on table "public"."Blog_Category" to "service_role";

grant select on table "public"."Blog_Category" to "service_role";

grant trigger on table "public"."Blog_Category" to "service_role";

grant truncate on table "public"."Blog_Category" to "service_role";

grant update on table "public"."Blog_Category" to "service_role";

grant delete on table "public"."Category" to "anon";

grant insert on table "public"."Category" to "anon";

grant references on table "public"."Category" to "anon";

grant select on table "public"."Category" to "anon";

grant trigger on table "public"."Category" to "anon";

grant truncate on table "public"."Category" to "anon";

grant update on table "public"."Category" to "anon";

grant delete on table "public"."Category" to "authenticated";

grant insert on table "public"."Category" to "authenticated";

grant references on table "public"."Category" to "authenticated";

grant select on table "public"."Category" to "authenticated";

grant trigger on table "public"."Category" to "authenticated";

grant truncate on table "public"."Category" to "authenticated";

grant update on table "public"."Category" to "authenticated";

grant delete on table "public"."Category" to "service_role";

grant insert on table "public"."Category" to "service_role";

grant references on table "public"."Category" to "service_role";

grant select on table "public"."Category" to "service_role";

grant trigger on table "public"."Category" to "service_role";

grant truncate on table "public"."Category" to "service_role";

grant update on table "public"."Category" to "service_role";

grant delete on table "public"."Logs" to "anon";

grant insert on table "public"."Logs" to "anon";

grant references on table "public"."Logs" to "anon";

grant select on table "public"."Logs" to "anon";

grant trigger on table "public"."Logs" to "anon";

grant truncate on table "public"."Logs" to "anon";

grant update on table "public"."Logs" to "anon";

grant delete on table "public"."Logs" to "authenticated";

grant insert on table "public"."Logs" to "authenticated";

grant references on table "public"."Logs" to "authenticated";

grant select on table "public"."Logs" to "authenticated";

grant trigger on table "public"."Logs" to "authenticated";

grant truncate on table "public"."Logs" to "authenticated";

grant update on table "public"."Logs" to "authenticated";

grant delete on table "public"."Logs" to "service_role";

grant insert on table "public"."Logs" to "service_role";

grant references on table "public"."Logs" to "service_role";

grant select on table "public"."Logs" to "service_role";

grant trigger on table "public"."Logs" to "service_role";

grant truncate on table "public"."Logs" to "service_role";

grant update on table "public"."Logs" to "service_role";

create policy "Create_Blog"
on "public"."Blog"
as permissive
for insert
to authenticated
with check (true);


create policy "Create_Blog_Category"
on "public"."Blog_Category"
as permissive
for insert
to authenticated
with check (true);


create policy "category_create_permission"
on "public"."Category"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."Logs"
as permissive
for insert
to authenticated
with check (true);


CREATE TRIGGER blog_create_log AFTER UPDATE ON public."Blog" FOR EACH ROW EXECUTE FUNCTION blog_create_log();

CREATE TRIGGER blog_delete_log AFTER UPDATE ON public."Blog" FOR EACH ROW EXECUTE FUNCTION blog_delete_log();

CREATE TRIGGER blog_update_log AFTER UPDATE ON public."Blog" FOR EACH ROW EXECUTE FUNCTION blog_update_log();

CREATE TRIGGER blog_category_create_log AFTER UPDATE ON public."Blog_Category" FOR EACH ROW EXECUTE FUNCTION blog_category_create_log();

CREATE TRIGGER blog_category_delete_log AFTER UPDATE ON public."Blog_Category" FOR EACH ROW EXECUTE FUNCTION blog_category_delete_log();

CREATE TRIGGER category_create_log AFTER UPDATE ON public."Category" FOR EACH ROW EXECUTE FUNCTION category_create_log();

CREATE TRIGGER category_delete_log AFTER UPDATE ON public."Category" FOR EACH ROW EXECUTE FUNCTION category_delete_log();

CREATE TRIGGER category_update_log AFTER UPDATE ON public."Category" FOR EACH ROW EXECUTE FUNCTION category_update_log();


